// Generated by Haxe 4.0.0 (git build development @ 3018ab109)
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.crypto {
	public class Crc32 : global::haxe.lang.HxObject {
		
		public Crc32(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Crc32() {
			global::haxe.crypto.Crc32.__hx_ctor_haxe_crypto_Crc32(this);
		}
		
		
		protected static void __hx_ctor_haxe_crypto_Crc32(global::haxe.crypto.Crc32 __hx_this) {
			unchecked {
				__hx_this.crc = -1;
			}
		}
		
		
		public int crc;
		
		public virtual void @byte(int b) {
			unchecked {
				int tmp = ( (( this.crc ^ b )) & 255 );
				{
					int _g = 0;
					while (( _g < 8 )) {
						int j = _g++;
						if (( (( tmp & 1 )) == 1 )) {
							tmp = ( ((int) (( ((uint) (tmp) ) >> 1 )) ) ^ -306674912 );
						}
						else {
							tmp = ((int) (( ((uint) (tmp) ) >> 1 )) );
						}
						
					}
					
				}
				
				this.crc = ( ((int) (( ((uint) (this.crc) ) >> 8 )) ) ^ tmp );
			}
		}
		
		
		public virtual void update(global::haxe.io.Bytes b, int pos, int len) {
			unchecked {
				byte[] b1 = b.b;
				{
					int _g1 = pos;
					int _g = ( pos + len );
					while (( _g1 < _g )) {
						int i = _g1++;
						int tmp = ( (( this.crc ^ ((int) (b1[i]) ) )) & 255 );
						{
							int _g2 = 0;
							while (( _g2 < 8 )) {
								int j = _g2++;
								if (( (( tmp & 1 )) == 1 )) {
									tmp = ( ((int) (( ((uint) (tmp) ) >> 1 )) ) ^ -306674912 );
								}
								else {
									tmp = ((int) (( ((uint) (tmp) ) >> 1 )) );
								}
								
							}
							
						}
						
						this.crc = ( ((int) (( ((uint) (this.crc) ) >> 8 )) ) ^ tmp );
					}
					
				}
				
			}
		}
		
		
		public virtual int @get() {
			unchecked {
				return ( this.crc ^ -1 );
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 4948692:
					{
						this.crc = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 4948692:
					{
						this.crc = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5144726:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get", 5144726)) );
					}
					
					
					case 117802505:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "update", 117802505)) );
					}
					
					
					case 1092820744:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "byte", 1092820744)) );
					}
					
					
					case 4948692:
					{
						return this.crc;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 4948692:
					{
						return ((double) (this.crc) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 5144726:
					{
						return this.@get();
					}
					
					
					case 117802505:
					{
						this.update(((global::haxe.io.Bytes) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[2])) ));
						break;
					}
					
					
					case 1092820744:
					{
						this.@byte(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array<object> baseArr) {
			baseArr.push("crc");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


