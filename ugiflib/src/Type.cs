// Generated by Haxe 4.0.0 (git build development @ 3018ab109)
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.root {
	public class Type : global::haxe.lang.HxObject {
		
		public Type(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Type() {
			global::haxe.root.Type.__hx_ctor__Type(this);
		}
		
		
		protected static void __hx_ctor__Type(global::haxe.root.Type __hx_this) {
		}
		
		
		public static global::haxe.root.Array<object> getClassFields(global::System.Type c) {
			if (global::System.Object.ReferenceEquals(((object) (c) ), ((object) (typeof(string)) ))) {
				return new global::haxe.root.Array<object>(new object[]{"fromCharCode"});
			}
			
			global::haxe.root.Array<object> ret = new global::haxe.root.Array<object>(new object[]{});
			global::System.Reflection.BindingFlags this1 = global::System.Reflection.BindingFlags.Public;
			global::System.Reflection.BindingFlags this2 = ((global::System.Reflection.BindingFlags) (( ((global::System.Reflection.BindingFlags) (this1) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.Static) ) )) );
			global::System.Reflection.MemberInfo[] infos = ((global::System.Type) (c) ).GetMembers(((global::System.Reflection.BindingFlags) (this2) ));
			{
				int _g1 = 0;
				int _g = ( infos as global::System.Array ).Length;
				while (( _g1 < _g )) {
					int i = _g1++;
					string name = infos[i].Name;
					if ( ! (name.StartsWith("__hx_")) ) {
						ret.push(name);
					}
					
				}
				
			}
			
			return ret;
		}
		
		
		public static bool enumEq<T>(T a, T b) {
			if (global::haxe.lang.Runtime.eq(a, default(T))) {
				return global::haxe.lang.Runtime.eq(b, default(T));
			}
			else if (global::haxe.lang.Runtime.eq(b, default(T))) {
				return false;
			}
			else {
				return a.Equals(b);
			}
			
		}
		
		
		public static int enumIndex(object e) {
			if (( e is global::System.Enum )) {
				global::System.Array values = global::System.Enum.GetValues(((global::System.Type) (e.GetType()) ));
				return global::System.Array.IndexOf(((global::System.Array) (values) ), ((object) (e) ));
			}
			else {
				return (((global::haxe.lang.Enum) (e) ))._hx_index;
			}
			
		}
		
		
	}
}


