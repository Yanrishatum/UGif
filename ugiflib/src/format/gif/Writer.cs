// Generated by Haxe 4.0.0 (git build development @ 3018ab109)
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace format.gif {
	public class Writer : global::haxe.lang.HxObject {
		
		public Writer(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Writer(global::haxe.io.Output o) {
			global::format.gif.Writer.__hx_ctor_format_gif_Writer(this, o);
		}
		
		
		protected static void __hx_ctor_format_gif_Writer(global::format.gif.Writer __hx_this, global::haxe.io.Output o) {
			__hx_this.o = o;
			__hx_this.lzw = new global::format.gif.LZWEncoder();
			o.set_bigEndian(false);
		}
		
		
		public global::haxe.io.Output o;
		
		public global::format.gif.LZWEncoder lzw;
		
		public int gctSize;
		
		public virtual void write(object data) {
			unchecked {
				this.writeHeader(((global::format.gif.Version) (global::haxe.lang.Runtime.getField(data, "version", 2096228120, true)) ));
				this.writeLogicalScreenDescriptor(global::haxe.lang.Runtime.getField(data, "logicalScreenDescriptor", 2032764644, true), ((global::haxe.io.Bytes) (global::haxe.lang.Runtime.getField(data, "globalColorTable", 146652910, true)) ));
				{
					global::haxe.ds._List.ListNode<object> _g_head = ((global::haxe.ds.List<object>) (global::haxe.ds.List<object>.__hx_cast<object>(((global::haxe.ds.List) (global::haxe.lang.Runtime.getField(data, "blocks", 669658758, true)) ))) ).h;
					while (( _g_head != null )) {
						global::format.gif.Block val = ((global::format.gif.Block) (_g_head.item) );
						_g_head = _g_head.next;
						global::format.gif.Block block = ((global::format.gif.Block) (val) );
						switch (block._hx_index) {
							case 0:
							{
								object frame = ( block as global::format.gif.Block_BFrame ).frame;
								this.writeFrame(frame);
								break;
							}
							
							
							case 1:
							{
								global::format.gif.Extension ext = ( block as global::format.gif.Block_BExtension ).extension;
								switch (ext._hx_index) {
									case 0:
									{
										object gce = ( ext as global::format.gif.Extension_EGraphicControl ).gce;
										this.writeGraphicControl(gce);
										break;
									}
									
									
									case 1:
									{
										string text = ( ext as global::format.gif.Extension_EComment ).text;
										this.writeComment(text);
										break;
									}
									
									
									case 2:
									{
										object textExt = ( ext as global::format.gif.Extension_EText ).pte;
										this.writeText(textExt);
										break;
									}
									
									
									case 3:
									{
										global::format.gif.ApplicationExtension appExt = ( ext as global::format.gif.Extension_EApplicationExtension ).ext;
										this.writeAppExtension(appExt);
										break;
									}
									
									
									case 4:
									{
										global::haxe.io.Bytes bytes = ( ext as global::format.gif.Extension_EUnknown ).data;
										int id = ( ext as global::format.gif.Extension_EUnknown ).id;
										this.writeUnknownExtension(id, bytes);
										break;
									}
									
									
								}
								
								break;
							}
							
							
							case 2:
							{
								this.writeEOF();
								return;
							}
							
							
						}
						
					}
					
				}
				
				this.writeEOF();
			}
		}
		
		
		public virtual void writeHeader(global::format.gif.Version version) {
			unchecked {
				this.o.writeString("GIF");
				switch (version._hx_index) {
					case 0:
					{
						this.o.writeString("87a");
						break;
					}
					
					
					case 1:
					{
						this.o.writeString("89a");
						break;
					}
					
					
					case 2:
					{
						string v = ( version as global::format.gif.Version_Unknown ).version;
						if (( v.Length == 3 )) {
							this.o.writeString(v);
						}
						else if (( v.Length > 3 )) {
							this.o.writeString(global::haxe.lang.StringExt.substr(v, 0, new global::haxe.lang.Null<int>(3, true)));
						}
						else {
							while (( v.Length < 3 )) {
								v = global::haxe.lang.Runtime.concat(v, "-");
							}
							
							this.o.writeString(v);
						}
						
						break;
					}
					
					
				}
				
			}
		}
		
		
		public virtual void writeLogicalScreenDescriptor(object lsd, global::haxe.io.Bytes globalColorTable) {
			unchecked {
				this.o.writeUInt16(((int) (global::haxe.lang.Runtime.getField_f(lsd, "width", 1247983110, true)) ));
				this.o.writeUInt16(((int) (global::haxe.lang.Runtime.getField_f(lsd, "height", 38537191, true)) ));
				int packed = 0;
				if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(lsd, "hasGlobalColorTable", 2070785640, true))) {
					packed |= 128;
				}
				
				packed |= ( ( ((int) (global::haxe.lang.Runtime.getField_f(lsd, "colorResolution", 1018258543, true)) ) << ((int) (4) ) ) & 112 );
				if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(lsd, "sorted", 808948541, true))) {
					packed |= 8;
				}
				
				packed |= ( global::haxe.root.Math.round(( ( global::System.Math.Log(((double) (((int) (global::haxe.lang.Runtime.getField_f(lsd, "globalColorTableSize", 234855119, true)) )) )) / global::format.gif.Tools.LN2 ) - 1 )) & 7 );
				this.o.writeByte(packed);
				this.o.writeByte(((int) (global::haxe.lang.Runtime.getField_f(lsd, "backgroundColorIndex", 736935997, true)) ));
				if (( global::haxe.lang.Runtime.getField_f(lsd, "pixelAspectRatio", 623891245, true) == 1 )) {
					this.o.writeByte(0);
				}
				else {
					this.o.writeByte(( ( ((int) (global::haxe.lang.Runtime.getField_f(lsd, "pixelAspectRatio", 623891245, true)) ) * 64 ) - 15 ));
				}
				
				if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(lsd, "hasGlobalColorTable", 2070785640, true))) {
					if (( globalColorTable != null )) {
						this.o.writeBytes(globalColorTable, 0, globalColorTable.length);
						this.gctSize = ((int) (global::haxe.lang.Runtime.getField_f(lsd, "globalColorTableSize", 234855119, true)) );
					}
					else {
						throw global::haxe.lang.HaxeException.wrap("hasGlobalColorTable flag present, but there is no global color table!");
					}
					
				}
				
			}
		}
		
		
		public virtual void writeComment(string text) {
			unchecked {
				this.o.writeByte(33);
				this.o.writeByte(254);
				this.writeStringBlocks(text);
			}
		}
		
		
		public virtual void writeText(object textExt) {
			unchecked {
				this.o.writeByte(33);
				this.o.writeByte(1);
				this.o.writeByte(12);
				this.o.writeUInt16(((int) (global::haxe.lang.Runtime.getField_f(textExt, "textGridX", 853386981, true)) ));
				this.o.writeUInt16(((int) (global::haxe.lang.Runtime.getField_f(textExt, "textGridY", 853386982, true)) ));
				this.o.writeUInt16(((int) (global::haxe.lang.Runtime.getField_f(textExt, "textGridWidth", 1991808755, true)) ));
				this.o.writeUInt16(((int) (global::haxe.lang.Runtime.getField_f(textExt, "textGridHeight", 555415130, true)) ));
				this.o.writeByte(((int) (global::haxe.lang.Runtime.getField_f(textExt, "charCellWidth", 31706958, true)) ));
				this.o.writeByte(((int) (global::haxe.lang.Runtime.getField_f(textExt, "charCellHeight", 1539378591, true)) ));
				this.o.writeByte(((int) (global::haxe.lang.Runtime.getField_f(textExt, "textForegroundColorIndex", 1740766879, true)) ));
				this.o.writeByte(((int) (global::haxe.lang.Runtime.getField_f(textExt, "textForegroundColorIndex", 1740766879, true)) ));
				this.writeStringBlocks(global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.getField(textExt, "text", 1291439277, true)));
			}
		}
		
		
		public virtual void writeGraphicControl(object gce) {
			unchecked {
				this.o.writeByte(33);
				this.o.writeByte(249);
				this.o.writeByte(4);
				int packed = 0;
				{
					global::format.gif.DisposalMethod _g = ((global::format.gif.DisposalMethod) (global::haxe.lang.Runtime.getField(gce, "disposalMethod", 701242674, true)) );
					switch (_g._hx_index) {
						case 0:
						{
							break;
						}
						
						
						case 1:
						{
							packed |= 4;
							break;
						}
						
						
						case 2:
						{
							packed |= 8;
							break;
						}
						
						
						case 3:
						{
							packed |= 12;
							break;
						}
						
						
						case 4:
						{
							int idx = ( _g as global::format.gif.DisposalMethod_UNDEFINED ).index;
							packed |= ( (( idx & 7 )) << 2 );
							break;
						}
						
						
					}
					
				}
				
				if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(gce, "userInput", 1743811007, true))) {
					packed |= 2;
				}
				
				if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(gce, "hasTransparentColor", 755457067, true))) {
					packed |= 1;
				}
				
				this.o.writeByte(packed);
				this.o.writeUInt16(((int) (global::haxe.lang.Runtime.getField_f(gce, "delay", 1462163331, true)) ));
				this.o.writeByte(((int) (global::haxe.lang.Runtime.getField_f(gce, "transparentIndex", 772773472, true)) ));
				this.o.writeByte(0);
			}
		}
		
		
		public virtual void writeAppExtension(global::format.gif.ApplicationExtension appExt) {
			unchecked {
				this.o.writeByte(33);
				this.o.writeByte(255);
				this.o.writeByte(11);
				switch (appExt._hx_index) {
					case 0:
					{
						int loops = ( appExt as global::format.gif.ApplicationExtension_AENetscapeLooping ).loops;
						{
							this.o.writeString("NETSCAPE2.0");
							this.o.writeByte(3);
							this.o.writeByte(1);
							this.o.writeUInt16(loops);
							this.o.writeByte(0);
						}
						
						break;
					}
					
					
					case 1:
					{
						global::haxe.io.Bytes bytes = ( appExt as global::format.gif.ApplicationExtension_AEUnknown ).data;
						string version = ( appExt as global::format.gif.ApplicationExtension_AEUnknown ).version;
						string name = ( appExt as global::format.gif.ApplicationExtension_AEUnknown ).name;
						{
							this.o.writeString(name);
							this.o.writeString(version);
							this.writeBlocks(bytes);
						}
						
						break;
					}
					
					
				}
				
			}
		}
		
		
		public virtual void writeUnknownExtension(int id, global::haxe.io.Bytes bytes) {
			unchecked {
				this.o.writeByte(33);
				this.o.writeByte(id);
				this.writeBlocks(bytes);
			}
		}
		
		
		public virtual void writeFrame(object frame) {
			unchecked {
				this.o.writeByte(44);
				this.o.writeUInt16(((int) (global::haxe.lang.Runtime.getField_f(frame, "x", 120, true)) ));
				this.o.writeUInt16(((int) (global::haxe.lang.Runtime.getField_f(frame, "y", 121, true)) ));
				this.o.writeUInt16(((int) (global::haxe.lang.Runtime.getField_f(frame, "width", 1247983110, true)) ));
				this.o.writeUInt16(((int) (global::haxe.lang.Runtime.getField_f(frame, "height", 38537191, true)) ));
				int packed = 0;
				if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(frame, "localColorTable", 706588918, true))) {
					packed |= 128;
				}
				
				if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(frame, "interlaced", 1501088657, true))) {
					packed |= 64;
				}
				
				if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(frame, "sorted", 808948541, true))) {
					packed |= 32;
				}
				
				packed |= ( global::haxe.root.Math.round(( ( global::System.Math.Log(((double) (((int) (global::haxe.lang.Runtime.getField_f(frame, "localColorTableSize", 1584738519, true)) )) )) / global::format.gif.Tools.LN2 ) - 1 )) & 7 );
				this.o.writeByte(packed);
				if (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(frame, "localColorTable", 706588918, true))) {
					if (( ((global::haxe.io.Bytes) (global::haxe.lang.Runtime.getField(frame, "colorTable", 793759659, true)) ) != null )) {
						this.o.writeBytes(((global::haxe.io.Bytes) (global::haxe.lang.Runtime.getField(frame, "colorTable", 793759659, true)) ), 0, ((global::haxe.io.Bytes) (global::haxe.lang.Runtime.getField(frame, "colorTable", 793759659, true)) ).length);
					}
					else {
						throw global::haxe.lang.HaxeException.wrap("localColorTable flag is set, but there is no local color table!");
					}
					
				}
				
				this.lzw.encode(((int) (global::haxe.lang.Runtime.getField_f(frame, "width", 1247983110, true)) ), ((int) (global::haxe.lang.Runtime.getField_f(frame, "height", 38537191, true)) ), ((global::haxe.io.Bytes) (global::haxe.lang.Runtime.getField(frame, "pixels", 212463405, true)) ), ( (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(frame, "localColorTable", 706588918, true))) ? (((int) (global::haxe.lang.Runtime.getField_f(frame, "localColorTableSize", 1584738519, true)) )) : (this.gctSize) ), this.o, global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(frame, "interlaced", 1501088657, true)));
			}
		}
		
		
		public virtual void writeEOF() {
			unchecked {
				this.o.writeByte(59);
			}
		}
		
		
		public virtual void writeStringBlocks(string text) {
			unchecked {
				int len = default(int);
				int caret = 0;
				while (( caret < text.Length )) {
					len = ( text.Length - caret );
					if (( len > 255 )) {
						len = 255;
					}
					
					this.o.writeByte(len);
					{
						int _g1 = 0;
						int _g = len;
						while (( _g1 < _g )) {
							int i = _g1++;
							this.o.writeByte((global::haxe.lang.StringExt.charCodeAt(text, ( i + caret ))).@value);
						}
						
					}
					
					caret += len;
				}
				
				this.o.writeByte(0);
			}
		}
		
		
		public virtual void writeBlocks(global::haxe.io.Bytes bytes) {
			unchecked {
				int len = default(int);
				int caret = 0;
				while (( caret < bytes.length )) {
					len = ( bytes.length - caret );
					if (( len > 255 )) {
						len = 255;
					}
					
					this.o.writeByte(len);
					this.o.writeBytes(bytes, caret, len);
					caret += 255;
				}
				
				this.o.writeByte(0);
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1377802169:
					{
						this.gctSize = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1377802169:
					{
						this.gctSize = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 5398057:
					{
						this.lzw = ((global::format.gif.LZWEncoder) (@value) );
						return @value;
					}
					
					
					case 111:
					{
						this.o = ((global::haxe.io.Output) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1021542597:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeBlocks", 1021542597)) );
					}
					
					
					case 1892534710:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeStringBlocks", 1892534710)) );
					}
					
					
					case 602753309:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeEOF", 602753309)) );
					}
					
					
					case 457536206:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeFrame", 457536206)) );
					}
					
					
					case 1340130708:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeUnknownExtension", 1340130708)) );
					}
					
					
					case 601515549:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeAppExtension", 601515549)) );
					}
					
					
					case 1240041172:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeGraphicControl", 1240041172)) );
					}
					
					
					case 1437450540:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeText", 1437450540)) );
					}
					
					
					case 1184833344:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeComment", 1184833344)) );
					}
					
					
					case 1160494533:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeLogicalScreenDescriptor", 1160494533)) );
					}
					
					
					case 301554636:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeHeader", 301554636)) );
					}
					
					
					case 1348037855:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "write", 1348037855)) );
					}
					
					
					case 1377802169:
					{
						return this.gctSize;
					}
					
					
					case 5398057:
					{
						return this.lzw;
					}
					
					
					case 111:
					{
						return this.o;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1377802169:
					{
						return ((double) (this.gctSize) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1021542597:
					{
						this.writeBlocks(((global::haxe.io.Bytes) (dynargs[0]) ));
						break;
					}
					
					
					case 1892534710:
					{
						this.writeStringBlocks(global::haxe.lang.Runtime.toString(dynargs[0]));
						break;
					}
					
					
					case 602753309:
					{
						this.writeEOF();
						break;
					}
					
					
					case 457536206:
					{
						this.writeFrame(dynargs[0]);
						break;
					}
					
					
					case 1340130708:
					{
						this.writeUnknownExtension(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((global::haxe.io.Bytes) (dynargs[1]) ));
						break;
					}
					
					
					case 601515549:
					{
						this.writeAppExtension(((global::format.gif.ApplicationExtension) (dynargs[0]) ));
						break;
					}
					
					
					case 1240041172:
					{
						this.writeGraphicControl(dynargs[0]);
						break;
					}
					
					
					case 1437450540:
					{
						this.writeText(dynargs[0]);
						break;
					}
					
					
					case 1184833344:
					{
						this.writeComment(global::haxe.lang.Runtime.toString(dynargs[0]));
						break;
					}
					
					
					case 1160494533:
					{
						this.writeLogicalScreenDescriptor(dynargs[0], ((global::haxe.io.Bytes) (dynargs[1]) ));
						break;
					}
					
					
					case 301554636:
					{
						this.writeHeader(((global::format.gif.Version) (dynargs[0]) ));
						break;
					}
					
					
					case 1348037855:
					{
						this.write(dynargs[0]);
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array<object> baseArr) {
			baseArr.push("gctSize");
			baseArr.push("lzw");
			baseArr.push("o");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace format.gif {
	public class LZWEncoder : global::haxe.lang.HxObject {
		
		static LZWEncoder() {
			unchecked {
				global::format.gif.LZWEncoder.BITS = 12;
				global::format.gif.LZWEncoder.HSIZE = 5003;
			}
		}
		
		
		public LZWEncoder(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public LZWEncoder() {
			global::format.gif.LZWEncoder.__hx_ctor_format_gif_LZWEncoder(this);
		}
		
		
		protected static void __hx_ctor_format_gif_LZWEncoder(global::format.gif.LZWEncoder __hx_this) {
			unchecked {
				__hx_this.masks = new global::haxe.root.Array<int>(new int[]{0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535});
				__hx_this.EOF = -1;
				__hx_this.blockBuffer = global::haxe.io.Bytes.alloc(256);
			}
		}
		
		
		public static int BITS;
		
		public static int HSIZE;
		
		public int EOF;
		
		public global::haxe.root.Array<int> masks;
		
		public global::haxe.io.Output @out;
		
		public int bits;
		
		public int bitsCount;
		
		public int minCodeSize;
		
		public int codeSize;
		
		public int codeSizeLimit;
		
		public bool clearFlag;
		
		public int clearCode;
		
		public int eofCode;
		
		public int[] htab;
		
		public int[] codetab;
		
		public int freeEnt;
		
		public global::haxe.io.Bytes blockBuffer;
		
		public int blockBufferCaret;
		
		public global::haxe.io.Bytes pixels;
		
		public int width;
		
		public int height;
		
		public int remaining;
		
		public int pixelsCaret;
		
		public bool interlaced;
		
		public int pixelsX;
		
		public int pixelsY;
		
		public int interlacingStage;
		
		public int interlacingStep;
		
		public virtual void encode(int width, int height, global::haxe.io.Bytes pixels, int colorsCount, global::haxe.io.Output @out, bool interlaced) {
			unchecked {
				this.minCodeSize = global::haxe.root.Math.round(( global::System.Math.Log(((double) (colorsCount) )) / global::format.gif.Tools.LN2 ));
				this.pixels = pixels;
				this.width = width;
				this.height = height;
				this.@out = @out;
				int[] this1 = new int[5003];
				this.htab = ((int[]) (this1) );
				int[] this2 = new int[5003];
				this.codetab = ((int[]) (this2) );
				this.blockBufferCaret = 0;
				this.bits = 0;
				this.bitsCount = 0;
				this.clearCode = ( 1 << this.minCodeSize );
				this.eofCode = ( this.clearCode + 1 );
				this.freeEnt = ( this.clearCode + 2 );
				@out.writeByte(this.minCodeSize);
				this.remaining = ( width * height );
				this.interlaced = interlaced;
				if (interlaced) {
					this.pixelsX = 0;
					this.pixelsY = 0;
					this.interlacingStage = 0;
					this.interlacingStep = 8;
				}
				else {
					this.pixelsCaret = 0;
				}
				
				this.compress();
				@out.writeByte(0);
			}
		}
		
		
		public virtual void char_out(int c) {
			unchecked {
				this.blockBuffer.b[this.blockBufferCaret++] = ((byte) (c) );
				if (( this.blockBufferCaret >= 254 )) {
					this.flush_char();
				}
				
			}
		}
		
		
		public virtual void cl_block() {
			unchecked {
				this.cl_hash(5003);
				this.freeEnt = ( this.clearCode + 2 );
				this.clearFlag = true;
				this.output(this.clearCode);
			}
		}
		
		
		public virtual void cl_hash(int hsize) {
			unchecked {
				int _g1 = 0;
				int _g = hsize;
				while (( _g1 < _g )) {
					int i = _g1++;
					((int[]) (this.htab) )[i] = -1;
				}
				
			}
		}
		
		
		public virtual void compress() {
			unchecked {
				int disp = default(int);
				int i = default(int);
				this.clearFlag = false;
				this.codeSize = ( this.minCodeSize + 1 );
				this.codeSizeLimit = ( (( 1 << this.codeSize )) - 1 );
				int ent = this.nextPixel();
				int hshift = 0;
				int fcode = 5003;
				while (( fcode < 65536 )) {
					 ++ hshift;
					fcode *= 2;
				}
				
				hshift = ( 8 - hshift );
				int hsize_reg = 5003;
				this.cl_hash(hsize_reg);
				this.output(this.clearCode);
				int c = default(int);
				while (true) {
					c = this.nextPixel();
					if ( ! ((( c != this.EOF ))) ) {
						break;
					}
					
					fcode = ( (( c << 12 )) + ent );
					i = ( ( c << hshift ) ^ ent );
					if (( ((int) (((int[]) (this.htab) )[i]) ) == fcode )) {
						ent = ((int) (((int[]) (this.codetab) )[i]) );
						continue;
					}
					else if (( ((int) (((int[]) (this.htab) )[i]) ) >= 0 )) {
						disp = ( hsize_reg - i );
						if (( i == 0 )) {
							disp = 1;
						}
						
						bool skip = false;
						while (true) {
							if (( (i -= disp) < 0 )) {
								i += hsize_reg;
							}
							
							if (( ((int) (((int[]) (this.htab) )[i]) ) == fcode )) {
								ent = ((int) (((int[]) (this.codetab) )[i]) );
								skip = true;
								break;
							}
							
							if ( ! ((( ((int) (((int[]) (this.htab) )[i]) ) >= 0 ))) ) {
								break;
							}
							
						}
						
						if (skip) {
							continue;
						}
						
					}
					
					this.output(ent);
					ent = c;
					if (( this.freeEnt < 4096 )) {
						((int[]) (this.codetab) )[i] = this.freeEnt++;
						((int[]) (this.htab) )[i] = fcode;
					}
					else {
						this.cl_block();
					}
					
				}
				
				this.output(ent);
				this.output(this.eofCode);
			}
		}
		
		
		public virtual void flush_char() {
			if (( this.blockBufferCaret > 0 )) {
				this.@out.writeByte(this.blockBufferCaret);
				this.@out.writeBytes(this.blockBuffer, 0, this.blockBufferCaret);
				this.blockBufferCaret = 0;
			}
			
		}
		
		
		public int MAXCODE(int n_bits) {
			unchecked {
				return ( (( 1 << n_bits )) - 1 );
			}
		}
		
		
		public virtual int nextPixel() {
			unchecked {
				if (( this.remaining == 0 )) {
					return this.EOF;
				}
				
				this.remaining--;
				if (this.interlaced) {
					if ((  ++ this.pixelsX == this.width )) {
						this.pixelsX = 0;
						this.pixelsY += this.interlacingStep;
						if (( this.pixelsY >= this.height )) {
							{
								int _g = this.interlacingStage;
								switch (_g) {
									case 0:
									{
										this.pixelsY = 4;
										break;
									}
									
									
									case 1:
									{
										this.pixelsY = 2;
										this.interlacingStep = 4;
										break;
									}
									
									
									case 2:
									{
										this.pixelsY = 1;
										this.interlacingStep = 2;
										break;
									}
									
									
									default:
									{
										return -1;
									}
									
								}
								
							}
							
							this.interlacingStage++;
						}
						
					}
					
					return ((int) (this.pixels.b[( ( this.pixelsY * this.width ) + this.pixelsX )]) );
				}
				else {
					return ((int) (this.pixels.b[this.pixelsCaret++]) );
				}
				
			}
		}
		
		
		public virtual void output(int code) {
			unchecked {
				this.bits &= this.masks[this.bitsCount];
				if (( this.bitsCount > 0 )) {
					this.bits |= ( code << this.bitsCount );
				}
				else {
					this.bits = code;
				}
				
				this.bitsCount += this.codeSize;
				while (( this.bitsCount >= 8 )) {
					this.char_out(( this.bits & 255 ));
					this.bits >>= 8;
					this.bitsCount -= 8;
				}
				
				if (( ( this.freeEnt > this.codeSizeLimit ) || this.clearFlag )) {
					if (this.clearFlag) {
						this.codeSizeLimit = ( (( 1 << (this.codeSize = ( this.minCodeSize + 1 )) )) - 1 );
						this.clearFlag = false;
					}
					else {
						this.codeSize++;
						if (( this.codeSize == 12 )) {
							this.codeSizeLimit = 4096;
						}
						else {
							this.codeSizeLimit = ( (( 1 << this.codeSize )) - 1 );
						}
						
					}
					
				}
				
				if (( code == this.eofCode )) {
					while (( this.bitsCount > 0 )) {
						this.char_out(( this.bits & 255 ));
						this.bits >>= 8;
						this.bitsCount -= 8;
					}
					
					this.flush_char();
				}
				
			}
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1793650908:
					{
						this.interlacingStep = ((int) (@value) );
						return @value;
					}
					
					
					case 551993134:
					{
						this.interlacingStage = ((int) (@value) );
						return @value;
					}
					
					
					case 134699148:
					{
						this.pixelsY = ((int) (@value) );
						return @value;
					}
					
					
					case 134699147:
					{
						this.pixelsX = ((int) (@value) );
						return @value;
					}
					
					
					case 206591766:
					{
						this.pixelsCaret = ((int) (@value) );
						return @value;
					}
					
					
					case 1002555126:
					{
						this.remaining = ((int) (@value) );
						return @value;
					}
					
					
					case 38537191:
					{
						this.height = ((int) (@value) );
						return @value;
					}
					
					
					case 1247983110:
					{
						this.width = ((int) (@value) );
						return @value;
					}
					
					
					case 986695702:
					{
						this.blockBufferCaret = ((int) (@value) );
						return @value;
					}
					
					
					case 279728799:
					{
						this.freeEnt = ((int) (@value) );
						return @value;
					}
					
					
					case 823259145:
					{
						this.eofCode = ((int) (@value) );
						return @value;
					}
					
					
					case 897947994:
					{
						this.clearCode = ((int) (@value) );
						return @value;
					}
					
					
					case 1159640013:
					{
						this.codeSizeLimit = ((int) (@value) );
						return @value;
					}
					
					
					case 10885262:
					{
						this.codeSize = ((int) (@value) );
						return @value;
					}
					
					
					case 995215424:
					{
						this.minCodeSize = ((int) (@value) );
						return @value;
					}
					
					
					case 1718617065:
					{
						this.bitsCount = ((int) (@value) );
						return @value;
					}
					
					
					case 1092025094:
					{
						this.bits = ((int) (@value) );
						return @value;
					}
					
					
					case 3448988:
					{
						this.EOF = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1793650908:
					{
						this.interlacingStep = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 551993134:
					{
						this.interlacingStage = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 134699148:
					{
						this.pixelsY = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 134699147:
					{
						this.pixelsX = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1501088657:
					{
						this.interlaced = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 206591766:
					{
						this.pixelsCaret = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1002555126:
					{
						this.remaining = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 38537191:
					{
						this.height = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1247983110:
					{
						this.width = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 212463405:
					{
						this.pixels = ((global::haxe.io.Bytes) (@value) );
						return @value;
					}
					
					
					case 986695702:
					{
						this.blockBufferCaret = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1885347373:
					{
						this.blockBuffer = ((global::haxe.io.Bytes) (@value) );
						return @value;
					}
					
					
					case 279728799:
					{
						this.freeEnt = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1301734216:
					{
						this.codetab = ((int[]) (@value) );
						return @value;
					}
					
					
					case 1159105261:
					{
						this.htab = ((int[]) (@value) );
						return @value;
					}
					
					
					case 823259145:
					{
						this.eofCode = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 897947994:
					{
						this.clearCode = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 931066841:
					{
						this.clearFlag = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 1159640013:
					{
						this.codeSizeLimit = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 10885262:
					{
						this.codeSize = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 995215424:
					{
						this.minCodeSize = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1718617065:
					{
						this.bitsCount = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1092025094:
					{
						this.bits = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 5546126:
					{
						this.@out = ((global::haxe.io.Output) (@value) );
						return @value;
					}
					
					
					case 52596231:
					{
						this.masks = ((global::haxe.root.Array<int>) (global::haxe.root.Array<object>.__hx_cast<int>(((global::haxe.root.Array) (@value) ))) );
						return @value;
					}
					
					
					case 3448988:
					{
						this.EOF = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 209784577:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "output", 209784577)) );
					}
					
					
					case 1776869523:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "nextPixel", 1776869523)) );
					}
					
					
					case 1458549169:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "MAXCODE", 1458549169)) );
					}
					
					
					case 2007273841:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "flush_char", 2007273841)) );
					}
					
					
					case 62867362:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "compress", 62867362)) );
					}
					
					
					case 997273700:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "cl_hash", 997273700)) );
					}
					
					
					case 1517549559:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "cl_block", 1517549559)) );
					}
					
					
					case 782657381:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "char_out", 782657381)) );
					}
					
					
					case 2044981782:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "encode", 2044981782)) );
					}
					
					
					case 1793650908:
					{
						return this.interlacingStep;
					}
					
					
					case 551993134:
					{
						return this.interlacingStage;
					}
					
					
					case 134699148:
					{
						return this.pixelsY;
					}
					
					
					case 134699147:
					{
						return this.pixelsX;
					}
					
					
					case 1501088657:
					{
						return this.interlaced;
					}
					
					
					case 206591766:
					{
						return this.pixelsCaret;
					}
					
					
					case 1002555126:
					{
						return this.remaining;
					}
					
					
					case 38537191:
					{
						return this.height;
					}
					
					
					case 1247983110:
					{
						return this.width;
					}
					
					
					case 212463405:
					{
						return this.pixels;
					}
					
					
					case 986695702:
					{
						return this.blockBufferCaret;
					}
					
					
					case 1885347373:
					{
						return this.blockBuffer;
					}
					
					
					case 279728799:
					{
						return this.freeEnt;
					}
					
					
					case 1301734216:
					{
						return this.codetab;
					}
					
					
					case 1159105261:
					{
						return this.htab;
					}
					
					
					case 823259145:
					{
						return this.eofCode;
					}
					
					
					case 897947994:
					{
						return this.clearCode;
					}
					
					
					case 931066841:
					{
						return this.clearFlag;
					}
					
					
					case 1159640013:
					{
						return this.codeSizeLimit;
					}
					
					
					case 10885262:
					{
						return this.codeSize;
					}
					
					
					case 995215424:
					{
						return this.minCodeSize;
					}
					
					
					case 1718617065:
					{
						return this.bitsCount;
					}
					
					
					case 1092025094:
					{
						return this.bits;
					}
					
					
					case 5546126:
					{
						return this.@out;
					}
					
					
					case 52596231:
					{
						return this.masks;
					}
					
					
					case 3448988:
					{
						return this.EOF;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1793650908:
					{
						return ((double) (this.interlacingStep) );
					}
					
					
					case 551993134:
					{
						return ((double) (this.interlacingStage) );
					}
					
					
					case 134699148:
					{
						return ((double) (this.pixelsY) );
					}
					
					
					case 134699147:
					{
						return ((double) (this.pixelsX) );
					}
					
					
					case 206591766:
					{
						return ((double) (this.pixelsCaret) );
					}
					
					
					case 1002555126:
					{
						return ((double) (this.remaining) );
					}
					
					
					case 38537191:
					{
						return ((double) (this.height) );
					}
					
					
					case 1247983110:
					{
						return ((double) (this.width) );
					}
					
					
					case 986695702:
					{
						return ((double) (this.blockBufferCaret) );
					}
					
					
					case 279728799:
					{
						return ((double) (this.freeEnt) );
					}
					
					
					case 823259145:
					{
						return ((double) (this.eofCode) );
					}
					
					
					case 897947994:
					{
						return ((double) (this.clearCode) );
					}
					
					
					case 1159640013:
					{
						return ((double) (this.codeSizeLimit) );
					}
					
					
					case 10885262:
					{
						return ((double) (this.codeSize) );
					}
					
					
					case 995215424:
					{
						return ((double) (this.minCodeSize) );
					}
					
					
					case 1718617065:
					{
						return ((double) (this.bitsCount) );
					}
					
					
					case 1092025094:
					{
						return ((double) (this.bits) );
					}
					
					
					case 3448988:
					{
						return ((double) (this.EOF) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 209784577:
					{
						this.output(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1776869523:
					{
						return this.nextPixel();
					}
					
					
					case 1458549169:
					{
						return this.MAXCODE(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					
					case 2007273841:
					{
						this.flush_char();
						break;
					}
					
					
					case 62867362:
					{
						this.compress();
						break;
					}
					
					
					case 997273700:
					{
						this.cl_hash(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 1517549559:
					{
						this.cl_block();
						break;
					}
					
					
					case 782657381:
					{
						this.char_out(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ));
						break;
					}
					
					
					case 2044981782:
					{
						this.encode(((int) (global::haxe.lang.Runtime.toInt(dynargs[0])) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ), ((global::haxe.io.Bytes) (dynargs[2]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[3])) ), ((global::haxe.io.Output) (dynargs[4]) ), global::haxe.lang.Runtime.toBool(dynargs[5]));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array<object> baseArr) {
			baseArr.push("interlacingStep");
			baseArr.push("interlacingStage");
			baseArr.push("pixelsY");
			baseArr.push("pixelsX");
			baseArr.push("interlaced");
			baseArr.push("pixelsCaret");
			baseArr.push("remaining");
			baseArr.push("height");
			baseArr.push("width");
			baseArr.push("pixels");
			baseArr.push("blockBufferCaret");
			baseArr.push("blockBuffer");
			baseArr.push("freeEnt");
			baseArr.push("codetab");
			baseArr.push("htab");
			baseArr.push("eofCode");
			baseArr.push("clearCode");
			baseArr.push("clearFlag");
			baseArr.push("codeSizeLimit");
			baseArr.push("codeSize");
			baseArr.push("minCodeSize");
			baseArr.push("bitsCount");
			baseArr.push("bits");
			baseArr.push("out");
			baseArr.push("masks");
			baseArr.push("EOF");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


