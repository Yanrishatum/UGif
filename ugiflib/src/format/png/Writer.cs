// Generated by Haxe 4.0.0 (git build development @ 3018ab109)
using haxe.root;

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace format.png {
	public class Writer : global::haxe.lang.HxObject {
		
		public Writer(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Writer(global::haxe.io.Output o) {
			global::format.png.Writer.__hx_ctor_format_png_Writer(this, o);
		}
		
		
		protected static void __hx_ctor_format_png_Writer(global::format.png.Writer __hx_this, global::haxe.io.Output o) {
			__hx_this.o = o;
			o.set_bigEndian(true);
		}
		
		
		public global::haxe.io.Output o;
		
		public virtual void write(global::haxe.ds.List<object> png) {
			unchecked {
				{
					int _g = 0;
					global::haxe.root.Array<int> _g1 = new global::haxe.root.Array<int>(new int[]{137, 80, 78, 71, 13, 10, 26, 10});
					while (( _g < _g1.length )) {
						int b = _g1[_g];
						 ++ _g;
						this.o.writeByte(b);
					}
					
				}
				
				{
					global::haxe.ds._List.ListNode<object> _g_head = png.h;
					while (( _g_head != null )) {
						global::format.png.Chunk val = ((global::format.png.Chunk) (_g_head.item) );
						_g_head = _g_head.next;
						global::format.png.Chunk c = ((global::format.png.Chunk) (val) );
						switch (c._hx_index) {
							case 0:
							{
								this.writeChunk("IEND", global::haxe.io.Bytes.alloc(0));
								break;
							}
							
							
							case 1:
							{
								object h = ( c as global::format.png.Chunk_CHeader ).h;
								{
									global::haxe.io.BytesOutput b1 = new global::haxe.io.BytesOutput();
									b1.set_bigEndian(true);
									b1.writeInt32(((int) (global::haxe.lang.Runtime.getField_f(h, "width", 1247983110, true)) ));
									b1.writeInt32(((int) (global::haxe.lang.Runtime.getField_f(h, "height", 38537191, true)) ));
									b1.writeByte(((int) (global::haxe.lang.Runtime.getField_f(h, "colbits", 1724357446, true)) ));
									global::format.png.Color _g2 = ((global::format.png.Color) (global::haxe.lang.Runtime.getField(h, "color", 1247572323, true)) );
									int tmp = default(int);
									switch (_g2._hx_index) {
										case 0:
										{
											bool alpha = ( _g2 as global::format.png.Color_ColGrey ).alpha;
											tmp = ( (alpha) ? (4) : (0) );
											break;
										}
										
										
										case 1:
										{
											bool alpha1 = ( _g2 as global::format.png.Color_ColTrue ).alpha;
											tmp = ( (alpha1) ? (6) : (2) );
											break;
										}
										
										
										case 2:
										{
											tmp = 3;
											break;
										}
										
										
									}
									
									b1.writeByte(tmp);
									b1.writeByte(0);
									b1.writeByte(0);
									b1.writeByte(( (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.getField(h, "interlaced", 1501088657, true))) ? (1) : (0) ));
									this.writeChunk("IHDR", b1.getBytes());
								}
								
								break;
							}
							
							
							case 2:
							{
								global::haxe.io.Bytes d = ( c as global::format.png.Chunk_CData ).b;
								this.writeChunk("IDAT", d);
								break;
							}
							
							
							case 3:
							{
								global::haxe.io.Bytes b2 = ( c as global::format.png.Chunk_CPalette ).b;
								this.writeChunk("PLTE", b2);
								break;
							}
							
							
							case 4:
							{
								global::haxe.io.Bytes data = ( c as global::format.png.Chunk_CUnknown ).data;
								string id = ( c as global::format.png.Chunk_CUnknown ).id;
								this.writeChunk(id, data);
								break;
							}
							
							
						}
						
					}
					
				}
				
			}
		}
		
		
		public virtual void writeChunk(string id, global::haxe.io.Bytes data) {
			unchecked {
				this.o.writeInt32(data.length);
				this.o.writeString(id);
				this.o.write(data);
				global::haxe.crypto.Crc32 crc = new global::haxe.crypto.Crc32();
				{
					int _g = 0;
					while (( _g < 4 )) {
						int i = _g++;
						crc.@byte((global::haxe.lang.StringExt.charCodeAt(id, i)).@value);
					}
					
				}
				
				crc.update(data, 0, data.length);
				this.o.writeInt32(crc.@get());
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 111:
					{
						this.o = ((global::haxe.io.Output) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1518649614:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeChunk", 1518649614)) );
					}
					
					
					case 1348037855:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "write", 1348037855)) );
					}
					
					
					case 111:
					{
						return this.o;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				switch (hash) {
					case 1518649614:
					{
						this.writeChunk(global::haxe.lang.Runtime.toString(dynargs[0]), ((global::haxe.io.Bytes) (dynargs[1]) ));
						break;
					}
					
					
					case 1348037855:
					{
						this.write(((global::haxe.ds.List<object>) (global::haxe.ds.List<object>.__hx_cast<object>(((global::haxe.ds.List) (dynargs[0]) ))) ));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::haxe.root.Array<object> baseArr) {
			baseArr.push("o");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


