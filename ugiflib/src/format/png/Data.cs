// Generated by Haxe 4.0.0 (git build development @ 3018ab109)

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace format.png {
	public class Color : global::haxe.lang.Enum {
		
		protected Color(int index) : base(index) {
		}
		
		
		public static global::format.png.Color ColGrey(bool alpha) {
			return new global::format.png.Color_ColGrey(alpha);
		}
		
		
		public static global::format.png.Color ColTrue(bool alpha) {
			return new global::format.png.Color_ColTrue(alpha);
		}
		
		
		public static readonly global::format.png.Color ColIndexed = new global::format.png.Color_ColIndexed();
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace format.png {
	public sealed class Color_ColGrey : global::format.png.Color {
		
		public Color_ColGrey(bool alpha) : base(0) {
			this.alpha = alpha;
		}
		
		
		public override global::haxe.root.Array<object> getParams() {
			return new global::haxe.root.Array<object>(new object[]{this.alpha});
		}
		
		
		public override string getTag() {
			return "ColGrey";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.alpha});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::format.png.Color_ColGrey en = ( other as global::format.png.Color_ColGrey );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::haxe.root.Type.enumEq<object>(((object) (this.alpha) ), ((object) (en.alpha) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("ColGrey", new object[]{this.alpha});
		}
		
		
		public readonly bool alpha;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace format.png {
	public sealed class Color_ColTrue : global::format.png.Color {
		
		public Color_ColTrue(bool alpha) : base(1) {
			this.alpha = alpha;
		}
		
		
		public override global::haxe.root.Array<object> getParams() {
			return new global::haxe.root.Array<object>(new object[]{this.alpha});
		}
		
		
		public override string getTag() {
			return "ColTrue";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.alpha});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::format.png.Color_ColTrue en = ( other as global::format.png.Color_ColTrue );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::haxe.root.Type.enumEq<object>(((object) (this.alpha) ), ((object) (en.alpha) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("ColTrue", new object[]{this.alpha});
		}
		
		
		public readonly bool alpha;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace format.png {
	public sealed class Color_ColIndexed : global::format.png.Color {
		
		public Color_ColIndexed() : base(2) {
		}
		
		
		public override string getTag() {
			return "ColIndexed";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace format.png {
	public class Chunk : global::haxe.lang.Enum {
		
		protected Chunk(int index) : base(index) {
		}
		
		
		public static readonly global::format.png.Chunk CEnd = new global::format.png.Chunk_CEnd();
		
		public static global::format.png.Chunk CHeader(object h) {
			return new global::format.png.Chunk_CHeader(h);
		}
		
		
		public static global::format.png.Chunk CData(global::haxe.io.Bytes b) {
			return new global::format.png.Chunk_CData(b);
		}
		
		
		public static global::format.png.Chunk CPalette(global::haxe.io.Bytes b) {
			return new global::format.png.Chunk_CPalette(b);
		}
		
		
		public static global::format.png.Chunk CUnknown(string id, global::haxe.io.Bytes data) {
			return new global::format.png.Chunk_CUnknown(id, data);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace format.png {
	public sealed class Chunk_CEnd : global::format.png.Chunk {
		
		public Chunk_CEnd() : base(0) {
		}
		
		
		public override string getTag() {
			return "CEnd";
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace format.png {
	public sealed class Chunk_CHeader : global::format.png.Chunk {
		
		public Chunk_CHeader(object h) : base(1) {
			this.h = h;
		}
		
		
		public override global::haxe.root.Array<object> getParams() {
			return new global::haxe.root.Array<object>(new object[]{this.h});
		}
		
		
		public override string getTag() {
			return "CHeader";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.h});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::format.png.Chunk_CHeader en = ( other as global::format.png.Chunk_CHeader );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::haxe.root.Type.enumEq<object>(((object) (this.h) ), ((object) (en.h) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("CHeader", new object[]{this.h});
		}
		
		
		public readonly object h;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace format.png {
	public sealed class Chunk_CData : global::format.png.Chunk {
		
		public Chunk_CData(global::haxe.io.Bytes b) : base(2) {
			this.b = b;
		}
		
		
		public override global::haxe.root.Array<object> getParams() {
			return new global::haxe.root.Array<object>(new object[]{this.b});
		}
		
		
		public override string getTag() {
			return "CData";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.b});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::format.png.Chunk_CData en = ( other as global::format.png.Chunk_CData );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::haxe.root.Type.enumEq<object>(((object) (this.b) ), ((object) (en.b) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("CData", new object[]{this.b});
		}
		
		
		public readonly global::haxe.io.Bytes b;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace format.png {
	public sealed class Chunk_CPalette : global::format.png.Chunk {
		
		public Chunk_CPalette(global::haxe.io.Bytes b) : base(3) {
			this.b = b;
		}
		
		
		public override global::haxe.root.Array<object> getParams() {
			return new global::haxe.root.Array<object>(new object[]{this.b});
		}
		
		
		public override string getTag() {
			return "CPalette";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(3, new object[]{this.b});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::format.png.Chunk_CPalette en = ( other as global::format.png.Chunk_CPalette );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::haxe.root.Type.enumEq<object>(((object) (this.b) ), ((object) (en.b) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("CPalette", new object[]{this.b});
		}
		
		
		public readonly global::haxe.io.Bytes b;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace format.png {
	public sealed class Chunk_CUnknown : global::format.png.Chunk {
		
		public Chunk_CUnknown(string id, global::haxe.io.Bytes data) : base(4) {
			this.id = id;
			this.data = data;
		}
		
		
		public override global::haxe.root.Array<object> getParams() {
			return new global::haxe.root.Array<object>(new object[]{this.id, this.data});
		}
		
		
		public override string getTag() {
			return "CUnknown";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(4, new object[]{this.id, this.data});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::format.png.Chunk_CUnknown en = ( other as global::format.png.Chunk_CUnknown );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::haxe.root.Type.enumEq<object>(((object) (this.id) ), ((object) (en.id) ))) ) {
				return false;
			}
			
			if ( ! (global::haxe.root.Type.enumEq<object>(((object) (this.data) ), ((object) (en.data) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("CUnknown", new object[]{this.id, this.data});
		}
		
		
		public readonly string id;
		
		public readonly global::haxe.io.Bytes data;
		
	}
}


